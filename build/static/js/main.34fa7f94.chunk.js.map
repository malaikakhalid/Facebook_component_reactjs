{"version":3,"sources":["components/views/Facebook/index.js","App.js","serviceWorker.js","index.js"],"names":["Facebook","props","useState","showEmoji","setEmoji","console","log","style","paddingTop","className","src","userObject","avtar","createdBy","moment","createdAt","format","startOf","fromNow","descriptions","images","type","size","display","justifyContent","onMouseEnter","onMouseLeave","class","Date","now","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sSAkDeA,MA3Cf,SAAkBC,GAAQ,IAAD,EAESC,oBAAS,GAFlB,mBAEdC,EAFc,KAEHC,EAFG,KAKrB,OAFAC,QAAQC,IAAIL,GAGR,iCACI,yBAAKM,MAAO,CAACC,WAAW,IACpB,yBAAKC,UAAU,WACX,yBAAKA,UAAU,QAAQC,IAAKT,EAAMU,WAAWC,QAC7C,yBAAKH,UAAU,SACX,4BAAKR,EAAMU,WAAWE,WACtB,2BAAIC,IAAOb,EAAMU,WAAWI,WAAWC,OAAO,MAA9C,IAAsDF,IAAOb,EAAMU,WAAWI,WAAWE,QAAQ,QAAQC,aAGjH,uBAAGT,UAAU,QAAQR,EAAMU,WAAWQ,cACtC,6BACI,kBAAC,IAAD,CAAgBC,OAAQnB,EAAMU,WAAWS,UAG7CjB,GACI,yBAAKM,UAAU,SACX,kBAAC,IAAD,CAAeY,KAAK,OAAOC,KAAK,OAChC,kBAAC,IAAD,CAAeD,KAAK,OAAOC,KAAK,OAChC,kBAAC,IAAD,CAAeD,KAAK,MAAMC,KAAK,OAC/B,kBAAC,IAAD,CAAeD,KAAK,MAAMC,KAAK,OAC/B,kBAAC,IAAD,CAAeD,KAAK,QAAQC,KAAK,OACjC,kBAAC,IAAD,CAAeD,KAAK,OAAOC,KAAK,OAChC,kBAAC,IAAD,CAAeD,KAAK,MAAMC,KAAK,QAGvC,yBAAKf,MAAO,CAAEgB,QAAS,OAAQC,eAAgB,iBAC3C,4BACIC,aAAc,kBAAMrB,GAAS,IAC7BsB,aAAc,kBAAMtB,GAAS,KAChC,uBAAGuB,MAAM,qBAHV,SAIA,gCAAQ,uBAAGA,MAAM,oBAAjB,YACA,gCAAQ,uBAAGA,MAAM,4BAAjB,cCtCdhB,G,MAAY,CAChBE,UAAU,iBACVD,MAAM,iGACNO,aAAa,0EACbC,OAAS,CAAC,mGACV,wGACA,2EACA,mGACA,iHACA,kFACAL,UAAWa,KAAKC,QAaHC,MATf,WAEE,OACE,yBAAKrB,UAAU,OACZ,kBAAC,EAAD,CAAUE,WAAYA,MCZToB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3C,QAAQ2C,MAAMA,EAAMC,c","file":"static/js/main.34fa7f94.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport moment from 'moment';\r\nimport FbImageLibrary from 'react-fb-image-grid';\r\nimport FacebookEmoji from 'react-facebook-emoji';\r\n\r\n\r\n\r\nfunction Facebook(props) {\r\n\r\n    const [showEmoji, setEmoji] = useState(false)\r\n    console.log(props)\r\n\r\n    return (\r\n        <section >\r\n            <div style={{paddingTop:2}}>\r\n                <div className='fb-card'>\r\n                    <img className='avtar' src={props.userObject.avtar} />\r\n                    <div className='title'>\r\n                        <h1>{props.userObject.createdBy}</h1>\r\n                        <p>{moment(props.userObject.createdAt).format('LL')} {moment(props.userObject.createdAt).startOf('hour').fromNow()}</p>\r\n                    </div>\r\n                </div>\r\n                <p className='desp'>{props.userObject.descriptions}</p>\r\n                <div>\r\n                    <FbImageLibrary images={props.userObject.images} />\r\n                </div>\r\n                {\r\n                showEmoji &&\r\n                    <div className='emoji'>\r\n                        <FacebookEmoji type=\"like\" size=\"sm\" />\r\n                        <FacebookEmoji type=\"love\" size=\"sm\" />\r\n                        <FacebookEmoji type=\"wow\" size=\"sm\" />\r\n                        <FacebookEmoji type=\"yay\" size=\"sm\" />\r\n                        <FacebookEmoji type=\"angry\" size=\"sm\" />\r\n                        <FacebookEmoji type=\"haha\" size=\"sm\" />\r\n                        <FacebookEmoji type=\"sad\" size=\"sm\" />\r\n                    </div>\r\n                }\r\n                <div style={{ display: 'flex', justifyContent: 'space-around' }}>\r\n                    <button\r\n                        onMouseEnter={() => setEmoji(true)}\r\n                        onMouseLeave={() => setEmoji(false)}\r\n                    ><i class=\"fas fa-thumbs-up\"></i> Like</button>\r\n                    <button><i class=\"fas fa-comments\"></i> Comment</button>\r\n                    <button><i class=\"fas fa-share-alt-square\"></i> Share</button>\r\n                </div>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\nexport default Facebook;","import React from 'react';\n\nimport Facebook from './components/views/Facebook';\n\nimport './App.css';\n\nconst userObject ={\n  createdBy:'Malaika Khalid',\n  avtar:'https://i2.wp.com/nofiredrills.com/wp-content/uploads/2016/10/myavatar.png?fit=400%2C400&ssl=1',\n  descriptions:'Nature always wears the colors of the spirit. â€”Ralph Waldo Emerson',\n  images : ['https://images.pexels.com/photos/248797/pexels-photo-248797.jpeg?auto=compress&cs=tinysrgb&h=350',\n  'https://www.gettyimages.ie/gi-resources/images/Homepage/Hero/UK/CMS_Creative_164657191_Kingfisher.jpg',\n  'https://cdn.pixabay.com/photo/2016/10/27/22/53/heart-1776746_960_720.jpg',\n  'https://images.pexels.com/photos/257840/pexels-photo-257840.jpeg?auto=compress&cs=tinysrgb&h=350',\n  \"https://images.pexels.com/photos/67636/rose-blue-flower-rose-blooms-67636.jpeg?auto=compress&cs=tinysrgb&h=350\",\n  \"https://wallpaperbrowse.com/media/images/3848765-wallpaper-images-download.jpg\"],\n  createdAt: Date.now()\n  \n}\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n       <Facebook userObject={userObject}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}